// <auto-generated />
using System;
using MVCTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MVCTest.Migrations
{
    [DbContext(typeof(cesiumiotContext))]
    [Migration("20210217040947_SecondAttempt")]
    partial class SecondAttempt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Chinese (Traditional)_Taiwan.950")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MVCTest.AlaHuaGua", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ALaHuaGuas");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBikeCondition", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<int?>("Available")
                        .HasColumnType("integer")
                        .HasColumnName("available");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<int?>("Rents")
                        .HasColumnType("integer")
                        .HasColumnName("rents");

                    b.Property<int?>("Returns")
                        .HasColumnType("integer")
                        .HasColumnName("returns");

                    b.Property<string>("Stationuid")
                        .HasColumnType("text")
                        .HasColumnName("stationuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Ids")
                        .HasName("pd_dynamic_bike_conditions_pkey");

                    b.ToTable("pd_dynamic_bike_conditions");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusChanghuacounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_changhuacounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusChiayi", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_chiayis");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusChiayicounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_chiayicounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusHsinchu", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_hsinchus");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusHsinchucounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_hsinchucounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusHualiencounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_hualiencounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusKaohsiung", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_kaohsiungs");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusKeelung", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_keelungs");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusKinmencounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_kinmencounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusMiaolicounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_miaolicounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusNantoucounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_nantoucounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusNewtaipei", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_newtaipeis");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusPingtungcounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_pingtungcounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusTaichung", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_taichungs");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusTainan", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_tainans");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusTaipei", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_taipeis");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusTaitungcounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_taitungcounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusTaoyuan", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_taoyuans");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusYilancounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_yilancounties");
                });

            modelBuilder.Entity("MVCTest.PdDynamicBusYunlincounty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("double precision")
                        .HasColumnName("azimuth");

                    b.Property<int?>("Busstatus")
                        .HasColumnType("integer")
                        .HasColumnName("busstatus");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Platenumb")
                        .HasColumnType("text")
                        .HasColumnName("platenumb");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Updatetime")
                        .HasColumnType("text")
                        .HasColumnName("updatetime");

                    b.HasKey("Id");

                    b.ToTable("pd_dynamic_bus_yunlincounties");
                });

            modelBuilder.Entity("MVCTest.PdStaticBikeStopdetail", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Stationnameeng")
                        .HasColumnType("text")
                        .HasColumnName("stationnameeng");

                    b.Property<string>("Stationnamezh")
                        .HasColumnType("text")
                        .HasColumnName("stationnamezh");

                    b.Property<string>("Stationuid")
                        .HasColumnType("text")
                        .HasColumnName("stationuid");

                    b.HasKey("Ids")
                        .HasName("pd_static_bike_stopdetails_pkey");

                    b.ToTable("pd_static_bike_stopdetails");
                });

            modelBuilder.Entity("MVCTest.PdStaticBusLine", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<string>("Geometry")
                        .HasColumnType("text")
                        .HasColumnName("geometry");

                    b.Property<string>("Routename")
                        .HasColumnType("text")
                        .HasColumnName("routename");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.HasKey("Ids")
                        .HasName("pd_static_bus_line_pkey");

                    b.ToTable("pd_static_bus_line");
                });

            modelBuilder.Entity("MVCTest.PdStaticBusRoute", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<string>("Routeid")
                        .HasColumnType("text")
                        .HasColumnName("routeid");

                    b.Property<string>("Routename")
                        .HasColumnType("text")
                        .HasColumnName("routename");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.HasKey("Ids")
                        .HasName("pd_static_bus_routes_pkey");

                    b.ToTable("pd_static_bus_routes");
                });

            modelBuilder.Entity("MVCTest.PdStaticBusRoutedetail", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Routename")
                        .HasColumnType("text")
                        .HasColumnName("routename");

                    b.Property<string>("Routeuid")
                        .HasColumnType("text")
                        .HasColumnName("routeuid");

                    b.Property<string>("Stopname")
                        .HasColumnType("text")
                        .HasColumnName("stopname");

                    b.Property<string>("Stopsequence")
                        .HasColumnType("text")
                        .HasColumnName("stopsequence");

                    b.Property<string>("Stopuid")
                        .HasColumnType("text")
                        .HasColumnName("stopuid");

                    b.HasKey("Ids")
                        .HasName("pd_static_bus_routedetails_pkey");

                    b.ToTable("pd_static_bus_routedetails");
                });

            modelBuilder.Entity("MVCTest.PdStaticMrtRoute", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<string>("Lineid")
                        .HasColumnType("text")
                        .HasColumnName("lineid");

                    b.Property<string>("Routeid")
                        .HasColumnType("text")
                        .HasColumnName("routeid");

                    b.Property<string>("Routenameeng")
                        .HasColumnType("text")
                        .HasColumnName("routenameeng");

                    b.Property<string>("Routenamezh")
                        .HasColumnType("text")
                        .HasColumnName("routenamezh");

                    b.HasKey("Ids")
                        .HasName("pd_static_mrt_routes_pkey");

                    b.ToTable("pd_static_mrt_routes");
                });

            modelBuilder.Entity("MVCTest.PdStaticMrtRoutesshape", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("Checkdate")
                        .HasColumnType("text")
                        .HasColumnName("checkdate");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<string>("Geometry")
                        .HasColumnType("text")
                        .HasColumnName("geometry");

                    b.Property<string>("Lineid")
                        .HasColumnType("text")
                        .HasColumnName("lineid");

                    b.Property<string>("Linename")
                        .HasColumnType("text")
                        .HasColumnName("linename");

                    b.Property<string>("Updatedate")
                        .HasColumnType("text")
                        .HasColumnName("updatedate");

                    b.HasKey("Ids")
                        .HasName("pd_static_mrt_routesshape_pkey");

                    b.ToTable("pd_static_mrt_routesshape");
                });

            modelBuilder.Entity("MVCTest.PdStaticMrtStop", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("Checkdate")
                        .HasColumnType("text")
                        .HasColumnName("checkdate");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<string>("Lineid")
                        .HasColumnType("text")
                        .HasColumnName("lineid");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Routeid")
                        .HasColumnType("text")
                        .HasColumnName("routeid");

                    b.Property<string>("Stationid")
                        .HasColumnType("text")
                        .HasColumnName("stationid");

                    b.Property<string>("Stationname")
                        .HasColumnType("text")
                        .HasColumnName("stationname");

                    b.Property<string>("Updatedate")
                        .HasColumnType("text")
                        .HasColumnName("updatedate");

                    b.HasKey("Ids")
                        .HasName("pd_static_mrt_stop_pkey");

                    b.ToTable("pd_static_mrt_stop");
                });

            modelBuilder.Entity("MVCTest.PdStaticMrtStopexit", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Elevator")
                        .HasColumnType("boolean")
                        .HasColumnName("elevator");

                    b.Property<string>("Escalator")
                        .HasColumnType("text")
                        .HasColumnName("escalator");

                    b.Property<string>("Exitid")
                        .HasColumnType("text")
                        .HasColumnName("exitid");

                    b.Property<string>("Exitnameeng")
                        .HasColumnType("text")
                        .HasColumnName("exitnameeng");

                    b.Property<string>("Exitnamezh")
                        .HasColumnType("text")
                        .HasColumnName("exitnamezh");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Stationid")
                        .HasColumnType("text")
                        .HasColumnName("stationid");

                    b.HasKey("Ids")
                        .HasName("pd_static_mrt_stopexit_pkey");

                    b.ToTable("pd_static_mrt_stopexit");
                });

            modelBuilder.Entity("MVCTest.UdUserInfo", b =>
                {
                    b.Property<long>("Ids")
                        .HasColumnType("bigint")
                        .HasColumnName("ids");

                    b.Property<string>("Account")
                        .HasColumnType("text")
                        .HasColumnName("account");

                    b.Property<string>("Checkdate")
                        .HasColumnType("text")
                        .HasColumnName("checkdate");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Geometry")
                        .HasColumnType("text")
                        .HasColumnName("geometry");

                    b.Property<string>("Lineid")
                        .HasColumnType("text")
                        .HasColumnName("lineid");

                    b.Property<string>("Linename")
                        .HasColumnType("text")
                        .HasColumnName("linename");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<bool?>("Subs")
                        .HasColumnType("boolean")
                        .HasColumnName("subs");

                    b.Property<string>("Updatedate")
                        .HasColumnType("text")
                        .HasColumnName("updatedate");

                    b.HasKey("Ids")
                        .HasName("ud_user_info_pkey");

                    b.ToTable("ud_user_info");
                });
#pragma warning restore 612, 618
        }
    }
}
